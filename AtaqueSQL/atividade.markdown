# Login Seguro em Node.js

Este projeto demonstra um exemplo pr√°tico de login seguro utilizando Node.js com MySQL, protegendo contra dois tipos comuns de ataque:

- SQL Injection
- Ataques de For√ßa Bruta

---

## üîê Seguran√ßa Implementada

### 1. SQL Injection

**O que √©:**  
Ataque que explora falhas na constru√ß√£o de comandos SQL, permitindo que o invasor injete ou altere comandos no banco.

**Como era vulner√°vel:**

```javascript
const query = `SELECT * FROM users WHERE username = '${username}' AND password = '${password}'`;
```

**Corre√ß√£o aplicada:**

```javascript
const [rows] = await connection.execute(
  'SELECT * FROM users WHERE username = ?',
  [username]
);
```

**Por que funciona:**  
`execute` usa *prepared statements*, que impedem a inje√ß√£o de SQL ao separar comandos e dados.

---

### 2. For√ßa Bruta

**O que √©:**  
Ataques que tentam v√°rias combina√ß√µes de login at√© encontrar uma v√°lida.

**Corre√ß√£o aplicada:**

```javascript
const loginLimiter = rateLimit({
  windowMs: 5 * 60 * 1000,
  max: 5,
  message: 'Muitas tentativas. Tente novamente mais tarde.'
});
```

**Por que funciona:**  
Limita tentativas de login por IP, dificultando ataques automatizados.

---

### 3. Armazenamento Seguro de Senhas

**Corre√ß√£o aplicada:**

```javascript
const match = await bcrypt.compare(password, user.password);
```

**Por que funciona:**  
Senhas s√£o armazenadas com hash. Mesmo que o banco vaze, os dados est√£o protegidos.

---

## ‚öôÔ∏è Tecnologias Utilizadas

- Node.js
- Express
- MySQL2
- Bcrypt
- Express-rate-limit